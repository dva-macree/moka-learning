#!/usr/bin/env node
var path = require('path');
var fs = require('fs');


console.log('post-deploy hook');

var apiRoot = require(path.resolve('./moka.config.json')).apiRoot || 'moka_api';
var dbPath = path.resolve('.', 'static', apiRoot, 'db.json');
var addPath = path.resolve('./hooks/tmp_post_generate.json');
var tmpPostDeployPath = path.resolve('./hooks/tmp_post_deploy.json');

var receivers = [{
    name: "Yu同学",
    mail: "492899414@qq.com"
}]

var net = require('net');
function sendMail(host,user,pwd,to,msg) {
    return new Promise(resolve => {
        var socket = net.createConnection(25,host);
        var user64 = new Buffer(user).toString("base64");
        pwd  = new Buffer(pwd ).toString("base64");
        socket.on('connect',function () {
            this.write('HELO '+user+'\r\n');
        });
        var wt = net.Socket.prototype.write;
        socket.write = function () {
            return wt.apply(this,arguments);
        }

        var op = ['AUTH LOGIN\r\n'];
        socket.on('close', (had_error) => {
            !had_error && resolve();
        })
        socket.on('error', (err) => {
            resolve(err);
        })

        socket.pipe(process.stdout);
        socket.on('data',function (data) {
            data = data.toString();
            data.split('\r\n').forEach(data=>{
                var m = data.match(/^\d{3}/)
                if(!m) return;
                var code = m[0]
                switch (code){
                    case '250':{
                        var v = op.shift();
                        if(v==='AUTH LOGIN\r\n'){
                            op.push(user64+'\r\n');
                            op.push(pwd+'\r\n');
                        }else if(v==='RCPT TO:'+to+'\r\n'){
                            op.push('DATA\r\n');
                            op.push(msg+'\r\n.\r\n');
                        }
                        socket.write(v);
                        break;
                    }
                    case '334':{
                        var v = op.shift();
                        socket.write(v);
                        if(op.length===0) op.push('MAIL FROM:'+user+'\r\n');
                        break;
                    }
                    case '235': socket.write(op.shift()); op.push('RCPT TO:'+to+'\r\n'); break;
                    case '221': socket.end(); break;
                    case '354': socket.write(op.shift()); op.push('QUIT'+'\r\n'); break;
                    // default : console.log(data);
                }
            });
        })
    })
}

function mail_encode (key, val, encode="utf-8") {
    //http://www.programgo.com/article/59022457430/
    return `${key}: =?${encode}?B?${new Buffer(val).toString('base64')}?=`
}

function sync(callables) {
    if(callables.length==0) {
        return Promise.resolve();
    }
    return callables.shift().call()
        .then(function(x) {
            return sync(callables);
        })
}

if(fs.existsSync(dbPath) && fs.existsSync(addPath)) {
    var db = require(dbPath);
    var adds = require(addPath);

    var file_data = fs.existsSync(tmpPostDeployPath) && require(tmpPostDeployPath) || {lastDate: 0, hrefTile: ''};

    var sorted = db.index.sorted;
    var dbMain = db.main;
    adds = adds.filter(x=>!!dbMain[x]);
    if(adds.length==0) {
        fs.unlinkSync(addPath);
        return;
    }

    var lastDate = new Date(dbMain[adds[0]].head.realDate);
    var oldLastDate = new Date(file_data.lastDate);

    if( lastDate <= oldLastDate || file_data.hrefTitle == adds[0] ) {
        return;
    }

    var str = fs.readFileSync('./hooks/mail.tpl.html').toString();
    var compiled = compile(str);

    var writed = false;

    adds.forEach(add => {
        var data = dbMain[add];
        if(!data) return;
        if(new Date(data.head.realDate) > oldLastDate) {
            console.log('Sending Mail', data.head.title);
            sync(receivers.map(r => {
                return function () {
                    console.log('Sending', r.name, r.mail);

                    return sendMail(
                        'smtp.qq.com',
                        '492899414@qq.com',
                        'jrpzcdbebynzcabf',
                        r.mail,
                        `${mail_encode("From", "Moyu")} <moyuyc95@gmail.com>\r\n` +
                        `${mail_encode("Subject", `[墨鱼新的文章出炉啦!] ${data.head.title}`)}\r\n` +
                        `${mail_encode("To", r.name)} <${r.mail}>\r\n` +
                        `Content-Type: text/html; charset="utf-8"\r\n\r\n` +
                        `${render(compiled, Object.assign(data, {hrefTitle: add, _link: 'https://moyuyc.github.io'}))}`
                    ).then((err) => {
                        console.log('Sended', r.name, r.mail);
                        if (err) {
                            console.error(err);
                        } else {
                            if (!writed) {
                                fs.unlinkSync(addPath);
                                fs.writeFileSync('./hooks/tmp_post_deploy.json', JSON.stringify(
                                    {lastDate: dbMain[adds[0]].head.realDate, hrefTitle: adds[0]}
                                ));
                                writed = true;
                            }
                        }
                    })
                }
            }))
        }
    })
}

function compile (str) {
    var tpl = str;
    //.replace(/<%=([\s\S]+?)%>/g, (m, c) => "` + obj." + c + "+ `")
    //.replace(/<%([\s\S]+?)%>/g, (m ,c) => "`;\n" + c + "\ntpl += `")

    // tpl = tpl.replace(/\'\n/g, '\'').replace(/\n\'/gm, '\'')


    tpl = "var tpl = `" + tpl + "`;\n return tpl;"
    return new Function('obj', tpl);
}

function render (compiled, data) {
    //console.log(compiled(data));
    return compiled(data);
}